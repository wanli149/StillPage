ExoPlayer视频播放器开发方案
基于对项目架构和现有代码的分析，我将为您制定一个详细的开发方案，将ExoPlayer集成到StillPage项目中用于视频播放。
项目工作量评估
根据现有代码分析，开发工作量属于中等规模，主要因为：
需要创建新的视频播放Activity和相关组件
需要扩展现有的ExoPlayerHelper以支持视频
需要修改DramaInfoActivity以使用新的播放器
需要实现完整的视频控制UI和功能
详细开发方案
第一阶段：核心架构搭建 (预计2-3天)
1. 创建视频播放核心组件
任务1.1: 创建VideoPlayActivity
路径: app/src/main/java/io/stillpage/app/ui/book/video/VideoPlayActivity.kt
功能: 视频播放主界面，基于现有AudioPlayActivity进行改造
任务1.2: 扩展ExoPlayerHelper
路径: app/src/main/java/io/stillpage/app/help/exoplayer/ExoPlayerHelper.kt
功能: 添加视频格式支持和相关配置
2. 创建视频播放服务
任务2.1: 创建VideoPlayService
路径: app/src/main/java/io/stillpage/app/service/VideoPlayService.kt
功能: 视频播放后台服务，参考AudioPlayService实现
第二阶段：UI界面开发 (预计3-4天)
3. 创建视频播放界面
任务3.1: 设计视频播放布局
路径: app/src/main/res/layout/activity_video_play.xml
功能: 视频播放界面布局，包含播放器、控制栏、进度条等
任务3.2: 实现播放控制菜单
路径: app/src/main/res/menu/menu_video_play.xml (现有文件需要扩展)
功能: 实现倍速控制、全屏切换、字幕选择等功能
4. 创建视频播放ViewModel
任务4.1: 创建VideoPlayViewModel
路径: app/src/main/java/io/stillpage/app/ui/book/video/VideoPlayViewModel.kt
功能: 视频播放状态管理，参考AudioPlayViewModel实现
第三阶段：功能实现 (预计4-5天)
5. 实现核心播放功能
任务5.1: 视频URL解析和播放
功能: 从章节内容中提取视频URL并使用ExoPlayer播放
任务5.2: 播放控制实现
功能: 实现播放/暂停、快进/快退、倍速控制等基本功能
6. 实现高级功能
任务6.1: 字幕支持
功能: 实现字幕加载和显示功能
任务6.2: 全屏切换
功能: 实现横竖屏切换和全屏模式
任务6.3: 画中画模式
功能: 实现Android 8.0+的画中画模式支持
第四阶段：集成和优化 (预计2-3天)
7. 集成到现有系统
任务7.1: 修改DramaInfoActivity
路径: app/src/main/java/io/stillpage/app/ui/book/drama/info/DramaInfoActivity.kt
功能: 修改播放逻辑，使用新的ExoPlayer视频播放器替代WebView
任务7.2: 添加缓存支持
功能: 扩展现有的ExoPlayer缓存机制以支持视频缓存
8. 测试和优化
任务8.1: 功能测试
功能: 测试各种视频格式播放、控制功能、错误处理等
任务8.2: 性能优化
功能: 优化加载速度、内存使用、电池消耗等
技术实现细节
1. ExoPlayer扩展实现
需要在现有ExoPlayerHelper.kt中添加视频支持：
kotlin
// 添加视频MIME类型支持
when {
    lower.contains(".m3u8") -> builder.setMimeType(MimeTypes.APPLICATION_M3U8)
    lower.contains(".mpd") -> builder.setMimeType(MimeTypes.APPLICATION_MPD)
    lower.contains(".mp4") -> builder.setMimeType(MimeTypes.VIDEO_MP4)
    // 其他视频格式支持
}
2. 视频播放Activity核心代码框架
kotlin
class VideoPlayActivity : VMBaseActivity<ActivityVideoPlayBinding, VideoPlayViewModel>() {
    // ExoPlayer实例
    private lateinit var exoPlayer: ExoPlayer
    
    // 播放控制
    private fun playVideo(url: String) {
        // 创建媒体项并播放
    }
    
    // 全屏切换
    private fun toggleFullScreen() {
        // 实现全屏切换逻辑
    }
    
    // 倍速控制
    private fun setPlaybackSpeed(speed: Float) {
        // 设置播放速度
    }
}
3. 与现有系统的集成点
DramaInfoActivity修改:
将playChapterInWebView方法替换为调用新的VideoPlayActivity
保持现有的视频URL提取逻辑
菜单系统集成:
使用现有的menu_video_play.xml作为基础进行扩展
缓存系统:
复用现有的ExoPlayer缓存机制
可能需要调整缓存大小限制以适应视频内容
预期收益
性能提升: 原生播放比WebView快30-50%
功能增强: 支持更多播放控制选项
用户体验: 更流畅的播放体验和更好的错误处理
一致性: 音频和视频播放体验统一
离线支持: 通过缓存机制支持离线观看
风险和应对措施
兼容性问题:
应对: 详细测试各种视频格式和设备
内存占用:
应对: 实现合理的缓存策略和内存管理
网络错误处理:
应对: 复用现有音频播放器的错误处理机制